description = 'OpenMap in the Play Store, the example app for using osmdroid'

apply plugin: 'com.android.application'
apply from: "$rootDir/gradle/android-signing.gradle"
apply plugin: 'org.jetbrains.kotlin.android'

group = project.property("pom.groupId")
version = project.property("pom.version")

android {
    compileSdkVersion 34
    compileSdk 34

    defaultConfig {
        applicationId "org.osmdroid"

        minSdkVersion 24
        targetSdkVersion 34

        multiDexEnabled = true

        // default versionCode to 1 if not provided
        versionCode(project.hasProperty('android.versionCode')
                ? Integer.parseInt(project.property('android.versionCode')) : 34)

        versionName project.version
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.all {
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
    }

    packagingOptions {
        pickFirst "androidsupportmultidexversion.txt"
        pickFirst "META-INF/AL2.0"
        pickFirst "META-INF/LGPL2.1"
    }
}

dependencies {
    implementation 'org.mapsforge:mapsforge-map-android:0.21.0'
    implementation 'org.mapsforge:mapsforge-map:0.21.0'
    implementation 'org.mapsforge:mapsforge-themes:0.21.0'

    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation project(':osmdroid-android')
    implementation project(':osmdroid-geopackage')
    implementation project(':osmdroid-mapsforge')
    implementation project(':osmdroid-wms')
    implementation project(':osmdroid-shape')

    implementation 'io.github.missioncommand:mil-sym-android-renderer:0.1.59'
    implementation 'com.github.angads25:filepicker:1.1.1'
    implementation group: 'com.opencsv', name: 'opencsv', version: '5.8'

    implementation "com.google.android.material:material:1.11.0"
    implementation "androidx.cardview:cardview:1.0.0"
    implementation "androidx.recyclerview:recyclerview:1.3.2"
    implementation 'androidx.multidex:multidex:2.0.1'

    implementation "androidx.appcompat:appcompat:1.6.1"
    implementation 'ch.acra:acra:4.7.0'

    // memory leak testing
    implementation 'com.squareup.leakcanary:leakcanary-android:2.2'
    implementation 'androidx.core:core-ktx:1.12.0'

    // on device testing
    androidTestImplementation 'androidx.multidex:multidex:2.0.1'
    androidTestImplementation "androidx.annotation:annotation:1.7.1"

    androidTestImplementation "androidx.test:runner:1.5.2"
    androidTestImplementation "androidx.test:rules:1.5.0"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.5.1"
    androidTestImplementation "androidx.test.uiautomator:uiautomator:2.3.0"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:1.6.5"
}

android.applicationVariants.all { variant ->
    if (variant.getBuildType().name == "debug") {
        task "configDevice${variant.name.capitalize()}"(type: Exec) {
            dependsOn variant.install
            group = 'nameofyourtaskgroup'
            description = 'Grant fine location permission to debug builds.'

            def adb = android.getAdbExecutable().toString()
            def mypermission = 'android.permission.ACCESS_FINE_LOCATION'
            commandLine "$adb shell pm grant ${variant.applicationId} $mypermission".split(' ')
        }
        variant.testVariant.connectedInstrumentTest.dependsOn "configDevice${variant.name.capitalize()}"
    }
}

android.applicationVariants.all { variant ->
    if (variant.getBuildType().name == "debug") {
        task "configDevice2${variant.name.capitalize()}"(type: Exec) {
            dependsOn variant.install
            group = 'nameofyourtaskgroup'
            description = 'Grant write external storage permission to debug builds.'

            def adb = android.getAdbExecutable().toString()
            def mypermission = 'android.permission.WRITE_EXTERNAL_STORAGE'
            commandLine "$adb shell pm grant ${variant.applicationId} $mypermission".split(' ')
        }
        variant.testVariant.connectedInstrumentTest.dependsOn "configDevice2${variant.name.capitalize()}"
    }
}
