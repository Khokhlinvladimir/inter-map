description = 'An Android library to display OpenStreetMap views.'
apply plugin: 'com.android.library'
apply plugin: "maven-publish"
apply plugin: 'org.jetbrains.kotlin.android'

group = project.property("pom.groupId")
version = project.property("pom.version")

android {
    compileSdkVersion 34

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 34
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.4.1'
    }

    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.12.0'
    testImplementation "junit:junit:${project.property('junit.version')}"
    testImplementation "org.robolectric:robolectric:${project.property('robolectric.version')}"

    // Dependencies for Compose
    implementation platform('androidx.compose:compose-bom:2022.10.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'
}

import org.apache.tools.ant.filters.*

task cleanCustomFiles(type: Delete) {
    delete file('src/main/java/org/osmdroid/OsmdroidBuildInfo.java')
}

task copyFiles(type: Copy) {
    from 'src/main/filtered/org/osmdroid'
    into 'src/main/java/org/osmdroid'
    filter(ReplaceTokens, tokens: [
            "pom.version": project.property("pom.version"),
            "date": new Date().toString()
    ])
}

preBuild.dependsOn(copyFiles)
copyFiles.dependsOn(cleanCustomFiles)

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                groupId project.property("pom.groupId")
                artifactId project.name
                version = project.property("pom.version")
                pom {
                    description = project.description
                    url = project.property("pom.url")

                    // SCM, organization, and developers are injected via other mechanisms

                    licenses {
                        license {
                            name = project.property("pom.licenses.license.0.name")
                            url = project.property("pom.licenses.license.0.url")
                            distribution = project.property("pom.licenses.license.0.distribution")
                        }
                    }
                }
            }
        }
    }
}

task androidSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar
}
